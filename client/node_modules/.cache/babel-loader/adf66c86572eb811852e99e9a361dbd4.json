{"ast":null,"code":"var _jsxFileName = \"/Users/crazynuget/Desktop/Projects/Redux-Store/client/src/components/ProductList/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\nimport { useDispatch, connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ProductList(_ref) {\n  _s();\n\n  let {\n    products,\n    currentCategory\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    loading,\n    data\n  } = useQuery(QUERY_PRODUCTS);\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n      data.products.forEach(product => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then(products => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(product => product.category._id === currentCategory);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Our Products:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), state.products.length ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row\",\n      children: filterProducts().map(product => /*#__PURE__*/_jsxDEV(ProductItem, {\n        _id: product._id,\n        image: product.image,\n        name: product.name,\n        price: product.price,\n        quantity: product.quantity\n      }, product._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"You haven't added any products yet!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: spinner,\n      alt: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 18\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductList, \"y6oWE5NdzFOFqwtwHdceS18btro=\", false, function () {\n  return [useDispatch, useQuery];\n});\n\n_c = ProductList;\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    currentCategory: state.currentCategory\n  };\n};\n\nexport default connect(mapStateToProps)(ProductList);\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/crazynuget/Desktop/Projects/Redux-Store/client/src/components/ProductList/index.js"],"names":["React","useEffect","ProductItem","useStoreContext","UPDATE_PRODUCTS","useQuery","QUERY_PRODUCTS","idbPromise","spinner","useDispatch","connect","ProductList","products","currentCategory","dispatch","loading","data","type","forEach","product","then","filterProducts","state","filter","category","_id","length","map","image","name","price","quantity","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport ProductItem from '../ProductItem';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport spinner from '../../assets/spinner.gif';\nimport { useDispatch, connect } from 'react-redux';\n\nfunction ProductList({products, currentCategory}) {\n  const dispatch = useDispatch();\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    } else if (!loading) {\n      idbPromise('products', 'get').then((products) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        });\n      });\n    }\n  }, [data, loading, dispatch]);\n\n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n\n    return state.products.filter(\n      (product) => product.category._id === currentCategory\n    );\n  }\n\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products,\n    currentCategory: state.currentCategory\n  }\n}\nexport default connect(mapStateToProps)(ProductList);\n"]},"metadata":{},"sourceType":"module"}